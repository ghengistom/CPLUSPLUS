#include <iostream>

using namespace std;
//CLASS DECLARATION -------------------------------
class NodeType 
{
public:
	NodeType(int = 0); // constructor with default value for
	// info field
	int info; // data
	NodeType * nextPtr; // pointer to next node in the list
};
//CLASS DEFINITION -------------------------------
// Constructor
NodeType::NodeType(int data)
{
	info = data;
	nextPtr = 0;
}
//FUNCTION PROTOTYPES -------------------------------
// Add a node at front - provided (Non-recursive)
void insertAtFront(NodeType * &headPtr, int value);
// Print with a loop - provided (Non-recursive)
void printLoop(NodeType * headPtr);
void printinorder(NodeType *headPtr);
void printbackwards(NodeType *headPtr);
void insertatend(NodeType *headPtr);
void deletelast(NodeType *&headPtr);
bool searchandDelete(NodeType *& crnt, int info);

//BEGIN MAIN() -------------------------------
int main()
{
	NodeType * head = NULL; //Setting to NULL is important
	NodeType * follower = NULL;
	NodeType * after = NULL;
	
	// add a node with value 5
	insertAtFront(head, 5);
	// add a node with value 7
	insertAtFront(head, 7);
	// add a node with value 9
	insertAtFront(head, 9);
	// print with Loop
	printLoop(head);
	//Add function calls to your own functions below
	cout << endl;
	printinorder(head);
	cout << "NULL";
	cout << endl;
	printbackwards(head);
	cout << "NULL";
	insertatend(head);
	cout << "this is reprint \n";
	printLoop(head);
	cout << "this is reprint \n";
	deletelast(head);
	printLoop(head);
	NodeType * holdhead=head;
	searchandDelete(head,  7);
	cout << "search and find \n";
	printLoop(head);
	system("pause");
	return 0;
} //END MAIN()

//FUNCTION DEFINITIONS -------------------------------
void insertAtFront(NodeType * &headPtr, int value)
{
	NodeType * currentPtr = new NodeType;
	currentPtr->info = value;
	currentPtr->nextPtr = headPtr;
	headPtr = currentPtr;
}
void printLoop(NodeType * headPtr)
{
	cout << " " << endl;
	while (headPtr != NULL)
	{
		cout << "[ " << headPtr->info << " ]->";
		headPtr = headPtr->nextPtr;
	}
	cout << "NULL" << endl << endl;
}
void printinorder(NodeType *headPtr)
{
	
	if (headPtr== NULL)
	{
		//cout<<endl;
	}
	else
	{
		cout << headPtr->info<<"-> ";
		printinorder(headPtr->nextPtr);
	}
	
}
void printbackwards(NodeType *headPtr)
{
	if (headPtr == NULL)
	{
		cout<<endl;
	}
	else
	{
		printbackwards(headPtr->nextPtr);
		cout << headPtr->info << "-> ";
	}
}


void insertatend(NodeType *headPtr)
{
	NodeType *newnode= new NodeType;
	newnode->info = 676;
	if (headPtr->nextPtr == NULL)
	{
		headPtr->nextPtr = newnode;
		newnode->nextPtr = NULL;
	}
	else 
	{
		//cout << headPtr->info << "-> ";
		insertatend(headPtr->nextPtr);					//traverse to end
	}	
}
void deletelast(NodeType *&headPtr)
{
	NodeType *follower;
	
	if (headPtr->nextPtr != NULL)				//as long as not null iterate
	{											//iterates to second to last node
		deletelast(headPtr->nextPtr);
	}
												
	else
	{	
		follower = headPtr;						//set follower pointer =  2nd to last node
		follower->nextPtr = NULL;				//set 2nd to last node = NULL (since it will be last)
		headPtr = headPtr->nextPtr;				//iterate to last node 
		delete headPtr;
	}
}
bool searchandDelete(NodeType *& crnt, int info)
{
    if (crnt == NULL) //In this case our list is empty, there is not a single node defined
    {
	   return false;
    }
    else if (crnt->nextPtr == NULL) //This is either the last node in the list or a list with only one node
    {
	   if (crnt->info == info)
	   {
		   delete crnt;
		   crnt=NULL;
		
		  return true;
	   }
	   else
	   {
		  return false;
	   }
    }
    else 
    {
													//case if more than 1 node
	   NodeType * tempPtr;
	   tempPtr = crnt;
	   tempPtr = tempPtr->nextPtr;

	   if (crnt->info == info) //Current pointer has a next and our value matches!
	   {
		  //delete this node
		 // crnt->info = NULL;
		 // crnt->nextPtr=NULL;
		   delete crnt;
		   crnt= tempPtr;
		//  crnt = tempPtr;
		  return true;
	   }
	   else //Current Pointer has a next and our values don't match
	   {
		  return searchandDelete(crnt->nextPtr, info );
	   }

    }
}

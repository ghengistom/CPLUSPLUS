// Content of BinarySearchTree.h
#include <iostream>
#include "TreeNode.h"
using namespace std;
//The following enumerated type declaration should be included.
enum TraversalOrderType { preorder, inorder, postorder };
template< class ItemType >
class Tree 
{
private:
	TreeNode< ItemType > * rootPtr; // pointer to the root
	//utility functions
	void printHelper(TreeNode< ItemType > *, ostream &, TraversalOrderType);
	bool insertHelper(TreeNode< ItemType > * &, ItemType);
	void deleteHelper(TreeNode< ItemType > * &, ItemType);
	void deleteNode(TreeNode<ItemType > * &);
	bool retrieveHelper(ItemType, TreeNode< ItemType > * &, ItemType &);
	void makeEmptyHelper(TreeNode< ItemType > * & );
public:
	// Constructor used before any operations are done on the list.
	// Initializes the list to empty.
	//Preconditions: None.
	//Postconditions: Tree is an empty Tree.
	Tree()
	{
		rootPtr = NULL;
	};
	//Destructor
	//Precondition: Tree exists, but may be empty.
	//Postcondition: makeEmpty is called to ensure the tree is empty
	// when the destructor is called.
	~Tree()
	{
		makeEmpty();
	};
	//Returns True if the tree is empty, otherwise returns false
	//Postcondition: Tree is unchanged.
	bool isEmpty() const
	{
		if (rootPtr==NULL)
		{
			return true;
		}
		else
			return false;
	};
	//Makes the tree empty if it is not empty already.
	//Preconditions: The tree exists.
	//Postconditions: Tree is now empty. Any dynamically allocated
	// memory which is no longer used is returned to the system.
	void makeEmpty()
	{
		
	};
	// Inserts a copy of newItem in the tree.
	//Precondition: The tree exists, but may be empty. It has binary
	// search property. ItemType has comparison operators defined.
	//Postcondition: if the tree already has an item where item ==
	// newItem, the function returns false and the tree is unchanged.
	// Otherwise, the newItem is inserted in the tree preserving and the
	// binary search property is maintained.
	void insert(ItemType newItem)
	{
		
		insertHelper(rootPtr, newItem);
		//return true;

	};
	// Given a searchItem, it tries to retrieve as foundItem, an item
	// in the tree where the item == searchItem.
	// Precondition: The tree exists and has the binary search property.
	// It may be empty. ItemType has comparison operators defined.
	// Postcondition: If the tree already has an item where item == 
	// searchItem, foundItem is set to that item, and the function
	// returns true. If the tree has no such item, the function returns
	// false and foundItem remains unchanged. The tree is unchanged.
	// Think of this as retrieving a record based on a key value.
	bool retrieve(ItemType searchItem, ItemType & foundItem)
	{
		if (searchItem== foundItem->)
	};
	// Given a deleteItem, it deletes from the tree any item where item
	// == deleteItem.
	// Precondition: Tree exists and has binary search property.
	// ItemType has comparison operators defined.
	// Postcondition: If the tree has an item where item == deleteItem,
	// that item is removed from the tree, and the function returns
	// true, and the binary search property is maintained. If the tree
	// has no such item, the function returns false and the tree
	// remains unchanged.
	void deleteItem(ItemType deleteItem)
	{
		deleteHelper(rootPtr, deleteItem);
		
	};
	//Prints the information about all the items in the Tree in order
	// to an ostream object Outstream. The function should print nothing
	// (No messages!) if the Tree is empty. The particular order
	// (preorder, inorder, or postorder) is given by order, a variable of
	// TraversalOrderType.
	// Preconditions: Outstream has been assigned and opened for writing
	// to. The insertion operator (<<) has been defined for objects of
	// class ItemType.
	// Postconditions: Tree is unchanged. The information for all
	// items has been written out to Outstream in the order specified
	// by order.
	void print(ostream & Outstream, TraversalOrderType order);
	void print22()
	{
		DisplayInorder(rootPtr);
	}
	void DisplayInorder(TreeNode< ItemType > * & rootPtr)
	{
		//cout << fixed << showpoint << setprecision(2);
		if (rootPtr != NULL)
		{
			DisplayInorder(rootPtr->leftPtr);
			cout <<  rootPtr->data <<  endl;
			DisplayInorder(rootPtr->rightPtr);
		}

	}
	
	

};
//Implement all functions in the template
template <class ItemType>
void makeEmptyHelper(TreeNode< ItemType > * & r)
{
	if (r != NULL)
	{
		makeEmptyHelper(r->leftPtr);
		makeEmptyHelper(r->rightPtr);
		delete r;
		r = NULL;
	}
}
//	=================================Delete Tree========================================================
template <class ItemType>
bool deleteHelper(TreeNode< ItemType > * &, ItemType n)
{
	if (n == rootPtr->data)
	{

		if (rootPtr != NULL)
		{
			DeleteTree(rootPtr->left);
			DeleteTree(rootPtr->right);
			delete rootPtr;
			rootPtr = NULL;
		}
		return true;
	}
	else
		return false;
}





template <class ItemType>
bool Tree<ItemType> :: insertHelper(TreeNode< ItemType > * & rootPtr, ItemType newItem)
{
	/*if (newItem == rootPtr->data)
	{
		return false;
	}
	*/
	

		if (rootPtr == NULL)
		{
			rootPtr = new TreeNode<ItemType>(newItem);
			
		}
		else
		{
			if (newItem < rootPtr->data)
			{
				insertHelper(rootPtr->leftPtr, newItem);
			}
			else if (newItem > rootPtr->data)
			{
				insertHelper(rootPtr->rightPtr, newItem);
			}

			return true;
		//end other else
		
	}//end else
}

template <class ItemType>
void Tree<ItemType>:: printHelper(TreeNode< ItemType > *, ostream &, TraversalOrderType)
{
	
}
/*
template <class ItemType>
void Tree<ItemType>::deleteHelper(TreeNode< ItemType > * &rootPtr, ItemType data)
{
if (rootPtr == NULL)
{
return rootPtr;
}

else if (data < rootPtr->data)
{
rootPtr->leftPtr = deleteHelper(rootPtr->leftPtr, data);
}
else if (data > rootPtr->data)
{
rootPtr->rightPtr = delete(rootPtr->rightPtr, data);
}
else
{
if (rightPtr->leftPtr == NULL && rootPtr->rightPtr == NULL)
{

free(root);
rootPtr = NULL;
}

else if (rootPtr->leftPtr == NULL)
{
nodeP temp = root;
root = root->right;
free(temp);
}
else if (root->right == NULL)
{
nodeP temp = root;
root = root->left;
free(temp);
}
else
{
nodeP temp = findMin(root->right);
root->ID = temp->ID;
strcpy(root->name, temp->name);
root->right = delete(root->right, temp->ID);

}
return root;
}
}
*/

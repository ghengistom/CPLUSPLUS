#include <iostream>

using namespace std;
struct NodeType;
typedef int ItemType;
class List
{
private:
	NodeType * head;
	NodeType * current;
	NodeType * previous;
	int position; // integer value of current position in list
public:
	List()
	{ /*Used before any operations are done on the linked list.
	  Initializes the linked list to empty.
	  Preconditions: None.
	  Postconditions: List is an empty linked list. The current position
	  is 1.*/
		head = NULL;
		current = NULL;
		previous = NULL;
		position = 1;
	}
	void makeEmpty()
	{ //Note: function body is different from the constructor.
		/*Makes the linked list empty if it is not empty already.
		Preconditions: The list may be empty or have items in it.
		Postconditions: List is now an empty linked list. Any dynamically
		allocated memory which is no longer used is returned to the system.
		The current position is 1. */
		
	}
	bool isEmpty()
	{ /*Returns True if List is an empty list; returns False otherwise.
	  Postconditions: List remains unchanged.*/ }
	void goToStart()
	{ /*Moves the current position to the start of the list.
	  Postconditions: Current position is set to 1.*/ 

		
	}
	void goToNext()
	{ /*If current position is not at the end of the list, moves the
	  current position to next position.
	  Postconditions: Position has been moved to the next position,
	  unless position had been already at the end of the list.
	  If the position had already been at the end of the list, it is
	  unchanged.
	  If the list is empty, nothing is changed.*/}
	bool isAtEnd()
	{ /*Returns True if the list is empty or if the current position is
	  at the end of the list.
	  Postconditions: List remains unchanged.*/ }
	ItemType CurrentItem()
	{ /*Returns the value of the current item in the linked list.
	  Assumes that the current item exists; i.e., the current position is
	  not at the end of the list (which would make it NULL).
	  Preconditions: List is not empty, and the current position is not
	  at the end of the list.
	  Postconditions: List and current position remain unchanged.*/ }
	void insert(newItem)
	{ /*Inserts the given newItem in the linked list before the item at
	  the current position. After the insertion, the current position
	  remains unchanged, but the newly inserted item is there. If there
	  was an item at the current position before the insertion, that item
	  would now be at current position +1.
	  Preconditions: The list may be empty.
	  Postconditions: The NewItem is inserted in the linked list before
	  any item that was at the current position. The current position
	  is unchanged and the newly inserted item will now be at that
	  position.*/
	
		//case if list is empty


	}
	void deleteCurrentItem()
	{ /*Deletes the item in the linked list at the current position.
	  Assumes that the current item exits.
	  Preconditions: List is not empty, and the current position is not
	  at the end of the list.
	  Postconditions: The item at the current position has been deleted.
	  The current position remains unchanged with respect to the list:
	  If the item had been the last item, the current position will be at
	  the end of the list.*/
	}
	int currentPosition();
	{ /*Returns the number of the current position. If there is an
	  item at the current position, it will return the relative position
	  of the item in the list. If the position is at the end of the
	  list, it will return 1 + the number of items in the list(i.e. 4
	  items in list, the function would return 5).
	  Postconditions: List and current position remains unchanged.*/ }
};

int main()
{



	return 0;
}

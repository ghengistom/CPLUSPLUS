//Programmer:		Tom Bernard
//Date:				11/06/2014
//Problem:			Project 10 Part 1
//Prof:				Ray Ahmadnia
//Description:      This program copies data from text into a BST
//					and display leaves, parents with one/two kids, count nodes and height of tree
//===================================================================================================
#include <iostream>
#include<fstream>
#include<string>
#include<algorithm>
#include<iomanip>

using namespace std;
struct node
{
	string month;
	int days;
	node *left;
	node *right;
};
node *root=NULL;
class BST
{
public:
//	=============================================Insert===============================================
	void insert(node *&p, string y, int x)
	{
		if (p == NULL)
		{
			p = new node;
			p->month = y;
			p->days = x;
			p->left = NULL;
			p->right = NULL;
			root = p;
		}
		else
		{
			if (y < p->month)
			{
				insert(p->left, y, x);
			}
			else if (y > p->month)
			{
				insert(p->right, y, x);
			}
		}
	}
	//	==========================================Insert==================================================

	//	===========================================LoadFile==================================================
	void Loadfile(string fname, node *&p)
	{
		fstream f;
		f.open(fname, ios::in);
		string x;
		int y;
		while (!f.eof())
		{
			f >> x;
			f >> y;
			insert(p, x, y);
		}
	}
	//	=======================================LoadFile====================================================

	//	=====================================DisplayLeaves===================================================
	void DisplayLeaves(node *p)
	{
		if (p != NULL)
		{
			if (p->left == NULL && p->right == NULL)
			{
				cout << p->month << " " ;
			}
			DisplayLeaves(p->left);
			DisplayLeaves(p->right);
		}
	}
	//	====================================DisplayLeaves====================================================

	//	============================== DisplayInorder=========================================================
	void DisplayInorder(node *p)
	{
		cout << fixed << showpoint << setprecision(2);
		if (p != NULL)
		{
			DisplayInorder(p->left); 
			cout << setw(10)<< p->month << setw(10) << p->days << endl;
			DisplayInorder(p->right);
		}
	}
	//	================================== DisplayInorder====================================================

	//	================================DisplayTwoKids======================================================
	void DisplayTwoKids(node *p)
	{
		if (p != NULL)
		{
			if (p->left != NULL && p->right != NULL)
			{
				cout << p->month << " ";
			}
			DisplayTwoKids(p->left);
			DisplayTwoKids(p->right);
		}

	}
	//	==================================DisplayTwoKids===================================================

	//	===============================DisplayOneKid=========================================================
	void DisplayOneKid(node *p)
	{
		if (p != NULL)
		{
			if (p->left != NULL && p->right == NULL)
			{
				cout << p->month << " ";
			}
			else if (p->left == NULL && p->right != NULL)
			{
				cout << p->month << " ";
			}
			DisplayOneKid(p->left);
			DisplayOneKid(p->right);
		}
	}
	//	==================================DisplayOneKid=================================================

	//	=============================== FindHeight=======================================================
	int FindHeight(node *r)
	{
		if (r == NULL)
			return 0;
		else
			return 1 + max(FindHeight(r->left), FindHeight(r->right));
	}
	//	================================= FindHeight=======================================================

	//	================================== max=======================================================
	int max(int x, int y)
	{
		return ((x>y) ? x : y);
	}
	//	=================================== max========================================================

	//	=================================CountNodes========================================================
	int CountNodes(node *p)
	{
		if (p == NULL)
		{
			return 0;
		}
		else
			return 1 + CountNodes(p->left) + CountNodes(p->right);
	}

	//	==================================CountNodes===================================================

	//	===================================== main=====================================================
};

int main()
{
	BST a;
	node *p = root;
	cout << fixed << showpoint << setprecision(2);
	cout << "Months name" << setw(15) << "No. Days\n";
	a.Loadfile("Months.txt", p);
	a.DisplayInorder(p);
	cout << endl;
	cout << "Leaves of the tree are: ";
	a.DisplayLeaves(p);
	cout << endl;
	cout << "Parents with two children are: ";
	a.DisplayTwoKids(p);
	cout << endl;
	cout << "Parents with one kid are: ";
	a.DisplayOneKid(p);
	cout << endl;
	cout << "The height of the tree is : ";
	int height;
	height=a.FindHeight(p);
	cout << height;
	int nodecount;
	nodecount = a.CountNodes(p);
	cout << "\nThe node count is : ";
	cout << nodecount;
	cout << endl;
	system("pause");
	return 0;
}
//	===================================== main=====================================================
/*	==========================================================================================
Months name      No. Days
April              30
August             31
December           31
February           28
January            31
July               30
June               30
March              31
May                30
November           30
October            31
September          30

Leaves of the tree are: December July November
Parents with two children are: January March
Parents with one kid are: February April August June May September October
The height of the tree is : 6
The node count is : 12
Press any key to continue . . .
=====================================n=====================================================*/
